#include <iostream>
#include <string>


struct mission { //создаем структуру данных "mission"
    std::string name; //не использовал using namespace std, так как без него удобнее работать со строками (опирался на код из семинара 5) //имя задачи
    int priority; //приоритет задачи
    std::string date; //срок выполнения задачи
};
int main() {
    int size = 1; //количество задач, которые мы можем описать (минимально одна задача будет введена)
    mission *tasks = new mission[size]; //выделение памяти для описание одной (на данный момент) задачи
    int count = 0; //количество уже введенных задач
    std::string useranswer; //ответ пользователя, будет ли он вводить еще задачи
    useranswer = "да"; //по умолчанию присваиваем в ответ пользователя значение "да", чтобы мы могли описать хотя бы одну задачу
    while ((useranswer == "да") || (useranswer == "Да")) { //начало цикла описания задач
        std::cout << "Введите название задачи: "; 
        std::string name;
        std::getline(std::cin, name); //считывание нзвания задачи в строку "name"
        std::cout << "Введите приоритет задачи (от 1 до 10): ";
        int priority;
        std::cin >> priority; //считывание приоритета задачи в переменную "priority"
        while ((priority < 1)||(priority > 10)){ //проверка корректности введенного приоритета задачи
            std::cout << "Некорректный приоритет!" << std::endl;
            std::cout << "Введите приоритет задачи (от 1 до 10): ";
            std::cin >> priority;
        }
        std::cin.ignore(); //очистка буфера после ввода числа
        std::cout << "Введите срок выполнения задачи: ";
        std::string date;
        std::getline(std::cin, date); //считывание срока выполнения задачи в строку "date"
        if (count == size) { //проверка, дотстаточно ли количества записей, чтобы можно было сохранить задачу, которую ввели только что
            size += 1; //если записей не дотстаточно, увеличиваем их количество на 1
            mission *temptask = new mission[size]; //создаем временную запись - копию уже сохраненных задач
            for (int i = 0; i < count; i++) {
                temptask[i] = tasks[i]; //добавляем в новую запись сохраненные ранее задачи
            }
            delete[] tasks; //удаляем выделенную для старых записей память
            tasks = temptask; //копируем значение временной записи в новую запись "tasks"
        }
        tasks[count].name = name; //сохраняем имя новой задачи
        tasks[count].priority = priority; //сохраняем приоритет новой задачи
        tasks[count].date = date; //сохраняем срок выполнения новой задачи
        std::cout << "Задача добавлена!" << std::endl;
        count++;
        std::cout << "Хотите добавить еще одну задачу? (да/нет): ";
        std::cin >> useranswer;
    };
    for (int i = 0; i < count - 1; i++) { //сортируем список сохраненных задач по убыванию приоритета
        for (int j = 0; j < count - i - 1; j++) {
            if (tasks[j].priority < tasks[j + 1].priority) {
                mission temp = tasks[j]; //создаем временную запись некоторой задачи, которую будем менять местами с другой по убыванию приоритета
                tasks[j] = tasks[j + 1];
                tasks[j + 1] = temp;
            }
        }
    }

    std::cout << "Список задач (по убыванию приоритета):" << std::endl;
    for (int i = 0; i < count; i++) {
        std::cout << i + 1 << ". Задача: " << tasks[i].name << ", Приоритет: " << tasks[i].priority << ", Срок выполнения: " << tasks[i].date << std::endl;
    }

    delete[] tasks; //удаляем выделенную под записи задач память

    return 0;
}